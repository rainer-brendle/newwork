Yellow Pages

Creating a distributed landscape description of objects, which can be part in a Kafka environment. 

The goal is to manage logical objects in one common place with in a cluster in a cload with a process calculus background. 
We basically follow the Actor model and define objects as logical, business defined "actors" in business processes. 
An actor on that level is an order, a delivery note, a bill-of-material or others.

This should limit the amount of Kafka topics in a distributed landscape to not a so big number even for a whole company, 
but shoudl also allow to have read access via HTTP to the same objects via TCP/IP.

THe assumption is that we can define a spatial and timely oordinate system for objects by doing this. Here the actor name can define some kind of a 
spatial coordinate (since every actor at a given point in time needs to have one valid master location. 
This instance acts as the transactional master. 

On the other side this object then can also manage a version number as a timely coordinate on itself. 
Taking this together we can reach a Vecor Time representatation of objects in a cloud. 

So it is about yellow pages both in space and time.

Since we will need for every actor two sequence numbers to be genrated into a landscape of a cluster,
we use mustache/handlebar to define the nodes in the distributed landscape of a clster postgreSQL instances (or actually other distributed database clusters.

The yellow pages implementation then acts at minimum as a "control plane" for the cluster, 
but it can also be a schema inside a distributed cluster of PostgreSQL instances.

The basic goal is define a causal map between logical objects ("actors" ) and their timey relations of versions - similiar as with a Vector Clock implementation.

Versions are defined by CREATTE, INSERT NEW VERSION and CANCEL operations on the object instances, which belong to the same "Actor".

The environment needs to generate a list of database instances and or schemata, but also of fail-over instances with predined replication schemes.

This needs to include applicatioon servers, which act basically as proxy servers connecting to the databases and Kafka topics all together in a consistent landscape picture. This is very close to 
Teraform, but with a very string focus on providing a product landscape (in a Kubernetes cluster).
